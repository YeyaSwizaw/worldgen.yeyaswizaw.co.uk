var mapjson = {
    noisemaps: [],
    tiledefs: []
}

function randomString(length) {
    var mask = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    var result = '';

    for(var i = 0; i < length; ++i) {
        result += mask[Math.round(Math.random() * (mask.length - 1))];
    }

    return result;
}
 
$(document).ready(function() {
    var map = L.map('map', { zoomControl: false }).setView([0, 0], 0);
    var layer = L.tileLayer('', {
        attribution: "Generated by <a href=\"https://github.com/YeyaSwizaw/libworldgen\">libworldgen</a>",
        continuousWorld: true,
        maxZoom: 0
    });

    $('.menu').sidr({
        name: 'sidr-right',
        side: 'right',
        renaming: false,
        source: '.menu-content'
    });

    $('#show-menu').click(function() {
        $.sidr('open', 'sidr-right');
    });

    $(function() {
        var counter = 0;
        var isDragging = false;

        map.on("mousedown", function() {
            map.on("mousemove", function() {
                isDragging = true;
                map.off("mousemove");
            });
        });
        map.on("mouseup", function() {
            var wasDragging = isDragging;
            isDragging = false;
            map.off("mousemove");
            if(!wasDragging) {
                $.sidr('close', 'sidr-right');
            }
        });
    });

    $('.hide-menu').click(function() {
        $.sidr('close', 'sidr-right');
    });

    function refreshMap() {
        layer.setUrl('/tile/{x}/{y}/' + JSON.stringify(mapjson, null, 0));
    }

    function setDefaults() {
        mapjson.noisemaps = [{
            seed: randomString(Math.random() * 32),
            gridw: 0.002,
            gridh: 0.002
        }, {
            seed: randomString(Math.random() * 32),
            gridw: 0.005,
            gridh: 0.005
        }, {
            combinations: [0, 1],
            factors: [20, 10]
        }];

        mapjson.tiledefs = [{
            red: 0,
            green: 0,
            blue: 255,
            constraintmaps: [2],
            constrainttypes: [0],
            constraintvals: [0]
        }, {
            red: 0,
            green: 255,
            blue: 0,
            constraintmaps: [],
            constrainttypes: [],
            constraintvals: []
        }]
    }

    function createNoisemapElement(noisemap, i) {
        var el = document.createElement('div');

        if(noisemap.seed != null) {
            var div1 = document.createElement('div');
            div1.setAttribute('data-row-span', '2');

            var div2 = document.createElement('div');
            div2.setAttribute('data-field-span', '2');

            (function() {
            var label = document.createElement('label');
            label.innerHTML = "<b>Noisemap " + i + " (Random)</b><br \\>Seed:";
            var input = document.createElement('input');
            input.setAttribute('type', 'text');
            input.value = noisemap.seed;
            div2.appendChild(label);
            div2.appendChild(input);
            div1.appendChild(div2);
            el.appendChild(div1);

            input.onchange = function() {
                noisemap.seed = input.value;
                refreshMap();
            }
            })();

            div1 = document.createElement('div');
            div1.setAttribute('data-row-span', '2');

            (function() {
            div2 = document.createElement('div');
            div2.setAttribute('data-field-span', '1');
            var label = document.createElement('label');
            label.innerHTML = "Grid Width:";
            var input = document.createElement('input');
            input.setAttribute('type', 'text');
            input.value = noisemap.gridw;
            div2.appendChild(label);
            div2.appendChild(input);
            div1.appendChild(div2);

            input.onchange = function() {
                noisemap.gridw = input.value;
                refreshMap();
            }
            })();

            (function() {
            div2 = document.createElement('div');
            div2.setAttribute('data-field-span', '1');
            var label = document.createElement('label');
            label.innerHTML = "Grid Height:";
            var input = document.createElement('input');
            input.setAttribute('type', 'text');
            input.value = noisemap.gridh;
            div2.appendChild(label);
            div2.appendChild(input);
            div1.appendChild(div2);
            el.appendChild(div1);

            input.onchange = function() {
                noisemap.gridh = input.value;
                refreshMap();
            }
            })();
        } else {
            var div1 = document.createElement('div');
            div1.setAttribute('data-row-span', '1');

            (function() {
            var div2 = document.createElement('div');
            div2.setAttribute('data-field-span', '1');
            var label = document.createElement('label');
            label.innerHTML = "<b>Noisemap " + i + " (Combination)</b><br \\>Elements:";
            var input = document.createElement('input');
            input.setAttribute('type', 'text');
            input.value = noisemap.combinations.join(", ");
            div2.appendChild(label);
            div2.appendChild(input);
            div1.appendChild(div2);
            el.appendChild(div1);

            input.onchange = function() {
                noisemap.combinations = input.value.replace(/\s/g, '').split(',');
                alert(noisemap.combinations);
                refreshMap();
            }
            })();

            div1 = document.createElement('div');
            div1.setAttribute('data-row-span', '1');

            (function() {
            var div2 = document.createElement('div');
            div2.setAttribute('data-field-span', '1');
            var label = document.createElement('label');
            label.innerHTML = "Factors:";
            var input = document.createElement('input');
            input.setAttribute('type', 'text');
            input.value = noisemap.factors.join(", ");
            div2.appendChild(label);
            div2.appendChild(input);
            div1.appendChild(div2);
            el.appendChild(div1);

            input.onchange = function() {
                noisemap.factors = input.value.replace(/\s/g, '').split(',');
                alert(noisemap.combinations);
                refreshMap();
            }
            })();
        }

        return el;
    }

    function createTiledefElement(tiledef, i) {
        var el = document.createElement('div');

        var div1 = document.createElement('div');
        div1.setAttribute('data-row-span', '3');

        (function() {
        var div2 = document.createElement('div');
        div2.setAttribute('data-field-span', '3');
        var label = document.createElement('label');
        label.innerHTML = "<b>Tile Definition " + i + "</b><br />Constraint Noisemaps";
        var input = document.createElement('input');
        input.setAttribute('type', 'text');
        input.value = tiledef.constraintmaps.join(", ");
        div2.appendChild(label);
        div2.appendChild(input);
        div1.appendChild(div2);
        el.appendChild(div1);

        input.onchange = function() {
            tiledef.constraintmaps = input.value.replace(/\s/g, '').split(',');
            refreshMap();
        }
        })();

        div1 = document.createElement('div');
        div1.setAttribute('data-row-span', '3');

        (function() {
        var div2 = document.createElement('div');
        div2.setAttribute('data-field-span', '3');
        var label = document.createElement('label');
        label.innerHTML = "Constraint Types";
        var input = document.createElement('input');
        input.setAttribute('type', 'text');
        input.value = tiledef.constrainttypes.join(", ");
        div2.appendChild(label);
        div2.appendChild(input);
        div1.appendChild(div2);
        el.appendChild(div1);

        input.onchange = function() {
            tiledef.constrainttypes = input.value.replace(/\s/g, '').split(',');
            refreshMap();
        }
        })();

        div1 = document.createElement('div');
        div1.setAttribute('data-row-span', '3');

        (function() {
        var div2 = document.createElement('div');
        div2.setAttribute('data-field-span', '3');
        var label = document.createElement('label');
        label.innerHTML = "Constraint Thresholds";
        var input = document.createElement('input');
        input.setAttribute('type', 'text');
        input.value = tiledef.constraintvals.join(", ");
        div2.appendChild(label);
        div2.appendChild(input);
        div1.appendChild(div2);
        el.appendChild(div1);

        input.onchange = function() {
            tiledef.constraintvals = input.value.replace(/\s/g, '').split(',');
            refreshMap();
        }
        })();

        div1 = document.createElement('div');
        div1.setAttribute('data-row-span', '3');

        (function() {
        var div2 = document.createElement('div');
        div2.setAttribute('data-field-span', '1');
        var label = document.createElement('label');
        label.innerHTML = "Red:";
        var input = document.createElement('input');
        input.setAttribute('type', 'text');
        input.value = tiledef.red;
        div2.appendChild(label);
        div2.appendChild(input);
        div1.appendChild(div2);

        input.onchange = function() {
            tiledef.red = input.value;
            refreshMap();
        }
        })();

        (function() {
        var div2 = document.createElement('div');
        div2.setAttribute('data-field-span', '1');
        var label = document.createElement('label');
        label.innerHTML = "Green:";
        var input = document.createElement('input');
        input.setAttribute('type', 'text');
        input.value = tiledef.green;
        div2.appendChild(label);
        div2.appendChild(input);
        div1.appendChild(div2);

        input.onchange = function() {
            tiledef.green = input.value;
            refreshMap();
        }
        })();

        (function() {
        var div2 = document.createElement('div');
        div2.setAttribute('data-field-span', '1');
        var label = document.createElement('label');
        label.innerHTML = "Blue:";
        var input = document.createElement('input');
        input.setAttribute('type', 'text');
        input.value = tiledef.blue;
        div2.appendChild(label);
        div2.appendChild(input);
        div1.appendChild(div2);
        el.appendChild(div1);

        input.onchange = function() {
            tiledef.blue = input.value;
            refreshMap();
        }
        })();

        return el;
    }

    function drawGUI() {
        var menuRoot = $('.rest-of-menu')[1];
        menuRoot.innerHTML = "";

        var noisemaps = mapjson.noisemaps;
        if(noisemaps.length > 0) {
            var fset = document.createElement('fieldset');
            var legend = document.createElement('legend');
            legend.innerHTML = "Noisemaps";
            fset.appendChild(legend);

            for(var i = 0; i < noisemaps.length; ++i) {
                fset.appendChild(createNoisemapElement(noisemaps[i], i));

                (function(n) {
                var btndiv = document.createElement('div');
                btndiv.setAttribute('class', 'button');
                var btnspan = document.createElement('span');
                btnspan.setAttribute('class', 'rem-nm-' + n);
                btnspan.innerHTML = "<a>Remove</a>";

                btndiv.appendChild(btnspan);
                fset.appendChild(btndiv);

                btnspan.onclick = function() {
                    noisemaps.splice(n, 1);
                    drawGUI();
                }
                })(i);
            }


            menuRoot.appendChild(document.createElement('br'));
            menuRoot.appendChild(fset);
        }

        var tiledefs = mapjson.tiledefs;
        if(tiledefs.length > 0) {
            var fset = document.createElement('fieldset');
            var legend = document.createElement('legend');
            legend.innerHTML = "Tile Definitions";
            fset.appendChild(legend);

            for(var i = 0; i < tiledefs.length; ++i) {
                fset.appendChild(createTiledefElement(tiledefs[i], i));

                (function(n) {
                var btndiv = document.createElement('div');
                btndiv.setAttribute('class', 'button');
                var btnspan = document.createElement('span');
                btnspan.setAttribute('class', 'rem-nm-' + n);
                btnspan.innerHTML = "<a>Remove</a>";

                btndiv.appendChild(btnspan);
                fset.appendChild(btndiv);

                btnspan.onclick = function() {
                    tiledefs.splice(n, 1);
                    drawGUI();
                }
                })(i);
            }

            menuRoot.appendChild(document.createElement('br'));
            menuRoot.appendChild(fset);
        }
    }

    $('.add-rand-nm').click(function() {
        mapjson.noisemaps.push({
            seed: randomString(Math.random() * 32),
            gridw: 0,
            gridh: 0
        });

        drawGUI();
    });

    $('.add-comb-nm').click(function() {
        mapjson.noisemaps.push({
            combinations: [],
            factors: []
        });

        drawGUI();
    });

    $('.add-td').click(function() {
        mapjson.tiledefs.push({
            red: 0,
            green: 0,
            blue: 0,
            constraintmaps: [],
            constrainttypes: [],
            constraintvals: []
        });

        drawGUI();
    });

    $('.refresh').click(refreshMap);

    $('.menu-form').submit(function(e) {
        e.preventDefault();
    });

    setDefaults();
    drawGUI();
    refreshMap();
    layer.addTo(map);
});
